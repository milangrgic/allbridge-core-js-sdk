/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Deposit = ContractEventLog<{
  user: string;
  amount: string;
  0: string;
  1: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type RewardsClaimed = ContractEventLog<{
  user: string;
  amount: string;
  0: string;
  1: string;
}>;
export type SwappedFromVUsd = ContractEventLog<{
  recipient: string;
  token: string;
  vUsdAmount: string;
  amount: string;
  fee: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type SwappedToVUsd = ContractEventLog<{
  sender: string;
  token: string;
  amount: string;
  vUsdAmount: string;
  fee: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type Withdraw = ContractEventLog<{
  user: string;
  amount: string;
  0: string;
  1: string;
}>;

export interface Abi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Abi;
  clone(): Abi;
  methods: {
    PP(): NonPayableTransactionObject<string>;

    a(): NonPayableTransactionObject<string>;

    accRewardPerShareP(): NonPayableTransactionObject<string>;

    adminFeeAmount(): NonPayableTransactionObject<string>;

    adminFeeShareBP(): NonPayableTransactionObject<string>;

    claimAdminFee(): NonPayableTransactionObject<void>;

    claimRewards(): NonPayableTransactionObject<void>;

    d(): NonPayableTransactionObject<string>;

    deposit(amount: number | string | BN): NonPayableTransactionObject<void>;

    feeShareBP(): NonPayableTransactionObject<string>;

    getD(
      x: number | string | BN,
      y: number | string | BN
    ): NonPayableTransactionObject<string>;

    getPrice(): NonPayableTransactionObject<string>;

    getY(x: number | string | BN): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    pendingReward(user_: string): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    router(): NonPayableTransactionObject<string>;

    setAdminFeeShare(
      _adminFeeShareBP: number | string | BN
    ): NonPayableTransactionObject<void>;

    setFeeShare(
      _feeShareBP: number | string | BN
    ): NonPayableTransactionObject<void>;

    setRouter(_router: string): NonPayableTransactionObject<void>;

    swapFromVUsd(
      user: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<string>;

    swapToVUsd(
      user: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<string>;

    token(): NonPayableTransactionObject<string>;

    tokenBalance(): NonPayableTransactionObject<string>;

    totalLpAmount(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    userInfo(arg0: string): NonPayableTransactionObject<{
      lpAmount: string;
      rewardDebt: string;
      0: string;
      1: string;
    }>;

    vUsdBalance(): NonPayableTransactionObject<string>;

    withdraw(amountLp: number | string | BN): NonPayableTransactionObject<void>;
  };
  events: {
    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    RewardsClaimed(cb?: Callback<RewardsClaimed>): EventEmitter;
    RewardsClaimed(
      options?: EventOptions,
      cb?: Callback<RewardsClaimed>
    ): EventEmitter;

    SwappedFromVUsd(cb?: Callback<SwappedFromVUsd>): EventEmitter;
    SwappedFromVUsd(
      options?: EventOptions,
      cb?: Callback<SwappedFromVUsd>
    ): EventEmitter;

    SwappedToVUsd(cb?: Callback<SwappedToVUsd>): EventEmitter;
    SwappedToVUsd(
      options?: EventOptions,
      cb?: Callback<SwappedToVUsd>
    ): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "RewardsClaimed", cb: Callback<RewardsClaimed>): void;
  once(
    event: "RewardsClaimed",
    options: EventOptions,
    cb: Callback<RewardsClaimed>
  ): void;

  once(event: "SwappedFromVUsd", cb: Callback<SwappedFromVUsd>): void;
  once(
    event: "SwappedFromVUsd",
    options: EventOptions,
    cb: Callback<SwappedFromVUsd>
  ): void;

  once(event: "SwappedToVUsd", cb: Callback<SwappedToVUsd>): void;
  once(
    event: "SwappedToVUsd",
    options: EventOptions,
    cb: Callback<SwappedToVUsd>
  ): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
